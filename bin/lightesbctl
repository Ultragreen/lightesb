require 'thor'
require 'lightesb/application'
require 'lightesb/controllers/scheduler'
require 'pp'
require 'yaml'

module LightESBCLI


  class Scheduler < Thor
    def initialize(*args)
      @controller = LightESB::Controllers::Scheduler::new
      super
    end

    desc "listall", "List all jobs (system/user)"
    def listall
      puts "List of User's jobs :"
      @controller.list_user.each do |job|
        puts " * #{job}"
      end
      puts "List of System's jobs :"
      @controller.list_system.each do |job|
        puts " * #{job}"
      end
    end


    desc "info <JOB>","Give description of the job <JOB>"
    def show(job)
      pp @controller.info_for :job => job 
    end

    #p test.info_for :job => 'system_input_file_rge_10', :explicit => true



    desc "unschedule <job> ", "unschedule the job <job>"
    def unschedule(job)
      @controller.unschedule :job => job.chomp
    end

    desc "send", "Send YAML definition in STDIN"
    def send
    	puts 'Enter definition in YAML and \n + CTRL + D' if STDIN.tty?
    	definition = STDIN.read.chomp
	print 'Sending request ...'
	@controller.send :definition => definition, :format => :yaml
        print "[OK]\n"	
    end

    desc "listuser", "List all user jobs"
    def listuser
            puts "List of User's jobs :"
      @controller.list_user.each do |job|
        puts " * #{job}"
        pp @controller.info_for :job => job
      end
    end
    
  end

  class Runners < Thor

    def initialize(*args)
      @application = LightESB::Application::new
      super
    end

    desc "start <runner> ", "Start the LightESB Runner named <runner>"
    def start(runner)
      @application.start :runner => runner
    end
 
    desc "startall", "Start all the LightESB runners"
    def startall
      @application.launch
    end


    desc "stop <runner> ", "Stop the LightESB Runner named <runner>"
    def stop(runner)
      @application.stop :runner => runner
    end
 
    desc "stopall", "Stop all the LightESB runners"
    def stopall
      @application.shutdown
    end

    desc "list_running", "List all running LightESB runners"
    def list_running_runners
      @application.list_running_runners.each do |runners|
        puts runners
      end
    end
    
    desc "list", "List all the LightESB runners"
    def list
      @application.list_runners.each do |runners|
         puts runners
      end
    end	
    
  end
 
  class LightESBCtl < Thor 
    desc "runners SUBCOMMAND ...ARGS", "manage the LightESB Runners"
        subcommand "runners", Runners
	
    desc "scheduler SUBCOMMAND ...ARGS", "manage the LightESB Scheduler"
        subcommand "scheduler", Scheduler
  end	
  
end



LightESBCLI::LightESBCtl.start(ARGV)
